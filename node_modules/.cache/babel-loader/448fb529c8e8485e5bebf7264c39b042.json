{"ast":null,"code":"import axios from 'axios'; // import { ElMessage, ElLoading } from 'element-plus'\n// import router from '../router/index.js'\n\nimport nprogress from 'nprogress'; // 引入进度条样式\n\nimport \"nprogress/nprogress.css\"; // start: 进度条开始  done：进度条结束\n// console.log('nprogress::::', nprogress);\n// let loading        //定义loading变量\n// function startLoading() {    //使用Element loading-start 方法\n//     loading = ElLoading.service({\n//         lock: true,\n//         text: '加载中...',\n//         background: 'rgba(0, 0, 0, 0.7)'\n//     })\n// }\n// function endLoading() {    //使用Element loading-close 方法\n//     loading?.close()\n// }\n// 请求拦截  设置统一header\n\naxios.interceptors.request.use(config => {\n  // 加载\n  // startLoading()\n  nprogress.start();\n  if (localStorage.eleToken) config.headers.Authorization = localStorage.eleToken;\n  return config;\n}, error => {\n  return Promise.reject(error);\n}); // 响应拦截  401 token过期处理\n\naxios.interceptors.response.use(response => {\n  // endLoading()\n  nprogress.done(); // return response.data\n\n  return response;\n}, error => {\n  // 错误提醒\n  // endLoading()\n  // ElMessage.error(error.response.data)\n  nprogress.done();\n  const {\n    status\n  } = error.response;\n\n  if (status == 401) {\n    // ElMessage.error('token值无效，请重新登录')\n    // 清除token\n    localStorage.removeItem('eleToken'); // 页面跳转\n    // router.push('/login')\n  }\n\n  return Promise.reject(error);\n});\nexport default axios;","map":{"version":3,"names":["axios","nprogress","interceptors","request","use","config","start","localStorage","eleToken","headers","Authorization","error","Promise","reject","response","done","status","removeItem"],"sources":["F:/hub-code/file-preview/src/axios/http.js"],"sourcesContent":["import axios from 'axios'\r\n// import { ElMessage, ElLoading } from 'element-plus'\r\n// import router from '../router/index.js'\r\nimport nprogress from 'nprogress'\r\n// 引入进度条样式\r\nimport \"nprogress/nprogress.css\"\r\n// start: 进度条开始  done：进度条结束\r\n\r\n// console.log('nprogress::::', nprogress);\r\n\r\n\r\n// let loading        //定义loading变量\r\n\r\n// function startLoading() {    //使用Element loading-start 方法\r\n//     loading = ElLoading.service({\r\n//         lock: true,\r\n//         text: '加载中...',\r\n//         background: 'rgba(0, 0, 0, 0.7)'\r\n//     })\r\n// }\r\n// function endLoading() {    //使用Element loading-close 方法\r\n//     loading?.close()\r\n// }\r\n\r\n// 请求拦截  设置统一header\r\naxios.interceptors.request.use(config => {\r\n    // 加载\r\n    // startLoading()\r\n    nprogress.start()\r\n    if (localStorage.eleToken)\r\n        config.headers.Authorization = localStorage.eleToken\r\n    return config\r\n}, error => {\r\n    return Promise.reject(error)\r\n})\r\n\r\n// 响应拦截  401 token过期处理\r\naxios.interceptors.response.use(response => {\r\n    // endLoading()\r\n    nprogress.done()\r\n    // return response.data\r\n    return response\r\n}, error => {\r\n    // 错误提醒\r\n    // endLoading()\r\n    // ElMessage.error(error.response.data)\r\n    nprogress.done()\r\n\r\n    const { status } = error.response\r\n    if (status == 401) {\r\n        // ElMessage.error('token值无效，请重新登录')\r\n        // 清除token\r\n        localStorage.removeItem('eleToken')\r\n\r\n        // 页面跳转\r\n        // router.push('/login')\r\n    }\r\n\r\n    return Promise.reject(error)\r\n})\r\n\r\nexport default axios"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;AACA;;AACA,OAAOC,SAAP,MAAsB,WAAtB,C,CACA;;AACA,OAAO,yBAAP,C,CACA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACAD,KAAK,CAACE,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CAA+BC,MAAM,IAAI;EACrC;EACA;EACAJ,SAAS,CAACK,KAAV;EACA,IAAIC,YAAY,CAACC,QAAjB,EACIH,MAAM,CAACI,OAAP,CAAeC,aAAf,GAA+BH,YAAY,CAACC,QAA5C;EACJ,OAAOH,MAAP;AACH,CAPD,EAOGM,KAAK,IAAI;EACR,OAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH,CATD,E,CAWA;;AACAX,KAAK,CAACE,YAAN,CAAmBY,QAAnB,CAA4BV,GAA5B,CAAgCU,QAAQ,IAAI;EACxC;EACAb,SAAS,CAACc,IAAV,GAFwC,CAGxC;;EACA,OAAOD,QAAP;AACH,CALD,EAKGH,KAAK,IAAI;EACR;EACA;EACA;EACAV,SAAS,CAACc,IAAV;EAEA,MAAM;IAAEC;EAAF,IAAaL,KAAK,CAACG,QAAzB;;EACA,IAAIE,MAAM,IAAI,GAAd,EAAmB;IACf;IACA;IACAT,YAAY,CAACU,UAAb,CAAwB,UAAxB,EAHe,CAKf;IACA;EACH;;EAED,OAAOL,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH,CAtBD;AAwBA,eAAeX,KAAf"},"metadata":{},"sourceType":"module"}